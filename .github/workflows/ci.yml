name: CI/CD Pipeline

# Ce pipeline se déclenche lors d'un push ou d'une pull request sur la branche main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job de construction, de test et de déploiement
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupérer le code du dépôt GitHub
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2: Configurer Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      # Étape 3: Mettre en cache les dépendances Python pour accélérer les builds
      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Étape 4: Installer les dépendances définies dans le fichier requirements.txt
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      # Étape 5: Exécuter les tests avec pytest
      - name: Run tests
        run: |
          pytest --maxfail=5 --disable-warnings

      # Étape 6: Créer une image Docker seulement si les tests réussissent
      - name: Build Docker image
        if: success()
        run: |
          docker build -t iris-api .

      # Étape 7: Se connecter à Docker Hub (ou un registre Docker privé)
      - name: Log in to Docker Hub
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Étape 8: Taguer et pousser l'image Docker sur Docker Hub
      - name: Push Docker image to Docker Hub
        if: success()
        run: |
          docker tag iris-api:latest ${{ secrets.DOCKER_USERNAME }}/iris-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/iris-api:latest

      # Étape 9: Installer la CLI Render pour déployer l'application
      - name: Install Render CLI
        if: success()
        run: |
          curl -L https://github.com/render-oss/render-cli/releases/download/v0.1.11/render-linux-x86_64 -o /usr/local/bin/render
          chmod +x /usr/local/bin/render

      # Étape 10: Créer un fichier de configuration pour Render CLI
      - name: Create Render CLI config
        if: success()
        run: |
          mkdir -p ~/.config/render
          echo "{\"api_key\": \"${{ secrets.RENDER_API_KEY }}\"}" > ~/.config/render/config.json

      # Étape 11: Déployer l'application sur Render
      - name: Deploy to Render
        if: success()
        run: |
          render deploy iris-api

          